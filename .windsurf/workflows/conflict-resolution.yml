name: Intelligent Conflict Resolution
description: Automated conflict resolution using JDime for Java files
# Reference: emerald-full-grafting-plan.mld lines 55-64

inputs:
  - name: conflicted_file
    description: "Path to the conflicted Java file"
    type: string
    required: true
  - name: use_jdime
    description: "Use JDime for intelligent Java merging"
    type: boolean
    default: true

steps:
  - name: Setup Git Environment
    description: "Set GIT_EDITOR to prevent Vim from opening (ref: line 4)"
    run: |
      export GIT_EDITOR=true
      echo "GIT_EDITOR set to prevent Vim interference"

  - name: Check JDime Installation
    description: "Verify JDime is available for intelligent merging (ref: line 56)"
    run: |
      if command -v jdime &> /dev/null; then
        echo "✅ JDime is available"
        jdime --version
      else
        echo "❌ JDime not found. Install with: brew install jdime"
        echo "Falling back to standard Git conflict resolution"
      fi

  - name: Analyze Conflict
    description: "Analyze the type and scope of conflicts"
    run: |
      echo "================================"
      echo "CONFLICT ANALYSIS:"
      echo "================================"
      echo "Conflicted file: ${{ inputs.conflicted_file }}"
      
      if [[ "${{ inputs.conflicted_file }}" == *.java ]]; then
        echo "File type: Java (eligible for JDime)"
      elif [[ "${{ inputs.conflicted_file }}" == *gradle.lockfile ]]; then
        echo "File type: Gradle lockfile (should be removed)"
      else
        echo "File type: Other (standard resolution)"
      fi
      
      echo ""
      echo "Conflict markers in file:"
      grep -n "<<<<<<< \|======= \|>>>>>>> " "${{ inputs.conflicted_file }}" || echo "No standard conflict markers found"

  - name: Resolve Gradle Lockfile Conflicts
    description: "Remove gradle.lockfile conflicts automatically (ref: lines 44-50)"
    run: |
      if [[ "${{ inputs.conflicted_file }}" == *gradle.lockfile ]]; then
        echo "Removing gradle.lockfile conflict: ${{ inputs.conflicted_file }}"
        git rm "${{ inputs.conflicted_file }}"
        echo "✅ Gradle lockfile removed"
      else
        echo "Not a gradle.lockfile, continuing with other resolution methods"
      fi

  - name: Intelligent Java Merge with JDime
    description: "Use JDime for Java files with method-level conflicts (ref: lines 57-63)"
    run: |
      if [[ "${{ inputs.conflicted_file }}" == *.java ]] && [[ "${{ inputs.use_jdime }}" == "true" ]] && command -v jdime &> /dev/null; then
        echo "Using JDime for intelligent Java merging..."
        
        # Get the three versions needed for 3-way merge
        BASE_FILE="${{ inputs.conflicted_file }}.base"
        LEFT_FILE="${{ inputs.conflicted_file }}.left"
        RIGHT_FILE="${{ inputs.conflicted_file }}.right"
        MERGED_FILE="${{ inputs.conflicted_file }}.merged"
        
        # Extract versions using git show
        git show :1:"${{ inputs.conflicted_file }}" > "$BASE_FILE" 2>/dev/null || echo "No base version"
        git show :2:"${{ inputs.conflicted_file }}" > "$LEFT_FILE" 2>/dev/null || echo "No left version"
        git show :3:"${{ inputs.conflicted_file }}" > "$RIGHT_FILE" 2>/dev/null || echo "No right version"
        
        # Run JDime structured merge
        if jdime --mode structured --output "$MERGED_FILE" "$LEFT_FILE" "$BASE_FILE" "$RIGHT_FILE"; then
          echo "✅ JDime merge successful"
          
          # Replace original file with merged version
          cp "$MERGED_FILE" "${{ inputs.conflicted_file }}"
          
          # Clean up temporary files
          rm -f "$BASE_FILE" "$LEFT_FILE" "$RIGHT_FILE" "$MERGED_FILE"
          
          # Add resolved file
          git add "${{ inputs.conflicted_file }}"
          
          echo "✅ Java file resolved with JDime"
        else
          echo "❌ JDime merge failed, falling back to manual resolution"
          rm -f "$BASE_FILE" "$LEFT_FILE" "$RIGHT_FILE" "$MERGED_FILE"
        fi
      else
        echo "Skipping JDime (not Java file, JDime disabled, or JDime not available)"
      fi

  - name: Standard Conflict Resolution
    description: "Use standard Git resolution for non-Java files (ref: lines 51-53)"
    run: |
      # Check if file still has conflicts
      if git status --porcelain | grep -q "^UU.*${{ inputs.conflicted_file }}"; then
        echo "File still has conflicts, applying standard resolution..."
        
        if [[ "${{ inputs.conflicted_file }}" == *gradle.lockfile ]]; then
          echo "Already handled gradle.lockfile above"
        else
          echo "Resolving by keeping current branch version (--ours)"
          git checkout --ours "${{ inputs.conflicted_file }}"
          git add "${{ inputs.conflicted_file }}"
          echo "✅ Resolved using current branch version"
        fi
      else
        echo "✅ File already resolved"
      fi

  - name: Verify Resolution
    description: "Verify the conflict has been resolved"
    run: |
      echo "================================"
      echo "RESOLUTION VERIFICATION:"
      echo "================================"
      
      if git status --porcelain | grep -q "^UU.*${{ inputs.conflicted_file }}"; then
        echo "❌ File still has unresolved conflicts"
        git status --porcelain | grep "${{ inputs.conflicted_file }}"
        exit 1
      else
        echo "✅ Conflict resolved successfully"
        
        # Show the resolution status
        if git status --porcelain | grep -q "^A.*${{ inputs.conflicted_file }}\|^M.*${{ inputs.conflicted_file }}"; then
          echo "✅ File staged for commit"
        else
          echo "⚠️  File may need to be staged"
        fi
      fi

  - name: Show Resolution Summary
    description: "Display summary of resolution actions taken"
    run: |
      echo "================================"
      echo "CONFLICT RESOLUTION SUMMARY:"
      echo "================================"
      echo "File: ${{ inputs.conflicted_file }}"
      
      if [[ "${{ inputs.conflicted_file }}" == *gradle.lockfile ]]; then
        echo "Action: Removed gradle.lockfile"
        echo "Reason: Auto-generated file (ref: line 44)"
      elif [[ "${{ inputs.conflicted_file }}" == *.java ]] && [[ "${{ inputs.use_jdime }}" == "true" ]]; then
        echo "Action: JDime intelligent merge attempted"
        echo "Reason: Java file with method-level conflicts (ref: line 56)"
      else
        echo "Action: Standard Git resolution (--ours)"
        echo "Reason: Keep current branch version (ref: line 51)"
      fi
      
      echo ""
      echo "File status:"
      git status --porcelain | grep "${{ inputs.conflicted_file }}" || echo "File not in Git status (may be resolved)"

validation:
  - name: Verify No Conflict Markers
    description: "Ensure no conflict markers remain in the file"
    run: |
      if [[ -f "${{ inputs.conflicted_file }}" ]]; then
        if grep -q "<<<<<<< \|======= \|>>>>>>> " "${{ inputs.conflicted_file }}"; then
          echo "❌ Conflict markers still present in file"
          grep -n "<<<<<<< \|======= \|>>>>>>> " "${{ inputs.conflicted_file }}"
          exit 1
        else
          echo "✅ No conflict markers found"
        fi
      else
        echo "✅ File was removed (likely gradle.lockfile)"
      fi

  - name: Verify Git Status
    description: "Ensure file is properly staged or removed"
    run: |
      if git status --porcelain | grep -q "^UU.*${{ inputs.conflicted_file }}"; then
        echo "❌ File still shows as unmerged"
        exit 1
      else
        echo "✅ File conflict resolved in Git"
      fi
