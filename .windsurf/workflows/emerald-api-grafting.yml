name: Emerald API Grafting
description: Cherry-pick changes from emerald-api to target branches
# Reference: emerald-full-grafting-plan.mld lines 22-40, emerald-api-grafting.md

inputs:
  - name: ticket_number
    description: "Ticket number (EMD-XXXXX or DPC-XXXXX)"
    type: string
    required: true
  - name: source_commit
    description: "Source commit SHA or merge commit to cherry-pick"
    type: string
    required: true
  - name: target_branch
    description: "Target branch for grafting (e.g., dev/metl/1.75.x)"
    type: string
    required: true
  - name: is_merge_commit
    description: "Is this a merge commit? (requires -m 1 flag)"
    type: boolean
    default: false

steps:
  - name: Setup Git Environment
    description: "Set GIT_EDITOR to prevent Vim from opening (ref: line 4)"
    run: |
      export GIT_EDITOR=true
      echo "GIT_EDITOR set to prevent Vim interference"

  - name: Navigate to Emerald API Project
    description: "Change to emerald-api project directory (ref: line 83)"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      echo "Current directory: $(pwd)"

  - name: Fetch Latest Changes
    description: "Fetch all branches and tags"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      git fetch --all --tags
      echo "Fetched latest changes from all remotes"

  - name: Create Graft Branch
    description: "Create grafting branch with proper naming"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      
      # Checkout target branch
      git checkout ${{ inputs.target_branch }}
      git pull origin ${{ inputs.target_branch }}
      
      # Create graft branch
      GRAFT_BRANCH="graft/${{ inputs.target_branch }}/${{ inputs.ticket_number }}"
      echo "Creating graft branch: $GRAFT_BRANCH"
      
      # Delete local branch if exists
      git branch -D "$GRAFT_BRANCH" 2>/dev/null || true
      
      # Create new branch
      git checkout -b "$GRAFT_BRANCH"

  - name: Show Source Commit Info
    description: "Display information about the commit to be cherry-picked"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      
      echo "================================"
      echo "SOURCE COMMIT INFORMATION:"
      echo "================================"
      git show --stat ${{ inputs.source_commit }}
      echo "================================"

  - name: Cherry-pick Changes
    description: "Cherry-pick the specified commit (ref: lines 28-29)"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      
      if [ "${{ inputs.is_merge_commit }}" = "true" ]; then
        echo "Cherry-picking merge commit with -m 1 flag..."
        git cherry-pick -m 1 ${{ inputs.source_commit }}
      else
        echo "Cherry-picking regular commit..."
        git cherry-pick ${{ inputs.source_commit }}
      fi
      
      echo "Cherry-pick completed successfully"

  - name: Handle Conflicts (if any)
    description: "Automated conflict resolution for common cases (ref: lines 41-53)"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      
      # Check if there are conflicts
      if git status --porcelain | grep -q "^UU\|^AA\|^DD"; then
        echo "Conflicts detected, applying automated resolution..."
        
        # Handle gradle.lockfile conflicts (ref: lines 44-50)
        for lockfile in $(git status --porcelain | grep "gradle.lockfile" | awk '{print $2}'); do
          echo "Removing conflicted gradle.lockfile: $lockfile"
          git rm "$lockfile"
        done
        
        # For other conflicts, keep current branch version (ref: lines 51-53)
        for file in $(git status --porcelain | grep -E "^UU|^AA" | awk '{print $2}'); do
          if [[ ! "$file" =~ gradle\.lockfile ]]; then
            echo "Resolving conflict in $file by keeping current branch version"
            git checkout --ours "$file"
            git add "$file"
          fi
        done
        
        # Continue cherry-pick
        git cherry-pick --continue
        
      else
        echo "No conflicts detected"
      fi

  - name: Verify Changes
    description: "Verify the cherry-pick was successful"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      
      echo "================================"
      echo "RECENT COMMITS:"
      echo "================================"
      git log --oneline -5
      
      echo "================================"
      echo "BRANCH STATUS:"
      echo "================================"
      git status

  - name: Push Graft Branch
    description: "Push the graft branch to remote (ref: line 52)"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      
      GRAFT_BRANCH="graft/${{ inputs.target_branch }}/${{ inputs.ticket_number }}"
      
      echo "Pushing graft branch: $GRAFT_BRANCH"
      git push origin "$GRAFT_BRANCH" --force
      
      echo "Graft branch pushed successfully"

  - name: Generate PR Link
    description: "Generate PR creation link (ref: line 53)"
    run: |
      GRAFT_BRANCH="graft/${{ inputs.target_branch }}/${{ inputs.ticket_number }}"
      # Extract version from target branch (e.g., dev/metl/1.75.x -> 1.75.x)
      VERSION=$(echo "${{ inputs.target_branch }}" | sed 's/.*\///')
      PR_LINK="https://github.com/matillion/emerald-api/compare/${{ inputs.target_branch }}...$GRAFT_BRANCH?expand=1"
      
      echo "================================"
      echo "EMERALD-API GRAFTING COMPLETED!"
      echo "================================"
      echo "Source commit: ${{ inputs.source_commit }}"
      echo "Target branch: ${{ inputs.target_branch }}"
      echo "Graft branch: $GRAFT_BRANCH"
      echo "Ticket: ${{ inputs.ticket_number }}"
      echo ""
      echo "Create PR here:"
      echo "$PR_LINK"
      echo "================================"

validation:
  - name: Verify Graft Branch
    description: "Ensure graft branch was created and contains changes"
    run: |
      cd ~/IdeaProjects/emerald-api-4/emerald-api
      GRAFT_BRANCH="graft/${{ inputs.target_branch }}/${{ inputs.ticket_number }}"
      
      if git show-ref --verify --quiet "refs/heads/$GRAFT_BRANCH"; then
        echo "✅ Graft branch created successfully"
        
        # Check if branch has commits ahead of target
        AHEAD=$(git rev-list --count ${{ inputs.target_branch }}..$GRAFT_BRANCH)
        if [ "$AHEAD" -gt 0 ]; then
          echo "✅ Graft branch has $AHEAD commits ahead of target"
        else
          echo "⚠️  Graft branch has no commits ahead of target"
        fi
      else
        echo "❌ Graft branch creation failed"
        exit 1
      fi
